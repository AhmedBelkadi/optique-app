generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sessions  Session[]

  @@index([email])
  @@index([createdAt])
  @@map("users")
}

model Session {
  id            String   @id @default(cuid())
  userId        String
  token         String   @unique
  encryptedData String
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model Category {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  deletedAt   DateTime?
  image       String?
  isDeleted   Boolean           @default(false)
  products    ProductCategory[]

  @@index([name])
  @@index([createdAt])
  @@map("categories")
}

model Product {
  id          String            @id @default(cuid())
  name        String
  description String
  price       Float
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  deletedAt   DateTime?
  isDeleted   Boolean           @default(false)
  brand       String?
  reference   String?           @unique
  categories  ProductCategory[]
  images      ProductImage[]

  @@index([isDeleted])
  @@index([brand])
  @@index([reference])
  @@index([createdAt])
  @@index([price])
  @@index([name])
  @@map("products")
}

model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
  @@map("product_categories")
}

model ProductImage {
  id        String   @id @default(cuid())
  filename  String
  path      String
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([order])
  @@map("product_images")
}

model Testimonial {
  id        String    @id @default(cuid())
  name      String
  message   String
  title     String?
  image     String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isDeleted Boolean   @default(false)

  @@index([isDeleted])
  @@index([isActive])
  @@index([createdAt])
  @@index([name])
  @@map("testimonials")
}

model Customer {
  id           String        @id @default(cuid())
  name         String
  email        String
  phone        String?
  address      String?
  notes        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  isDeleted    Boolean       @default(false)
  appointments Appointment[]

  @@index([isDeleted])
  @@index([email])
  @@index([name])
  @@index([createdAt])
  @@map("customers")
}

model Appointment {
  id          String            @id @default(cuid())
  customerId  String
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      AppointmentStatus @default(SCHEDULED)
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  deletedAt   DateTime?
  isDeleted   Boolean           @default(false)
  customer    Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([isDeleted])
  @@index([status])
  @@index([startTime])
  @@index([customerId])
  @@index([createdAt])
  @@map("appointments")
}

model Settings {
  id             String   @id @default("singleton")
  siteName       String?
  slogan         String?
  logoUrl        String?
  heroImageUrl   String?
  primaryColor   String?
  secondaryColor String?
  contactEmail   String?
  phone          String?
  whatsapp       String?
  address        String?
  openingHours   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("settings")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}
