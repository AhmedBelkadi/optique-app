generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  phone     String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastLoginAt DateTime?
  sessions  Session[]
  userRoles UserRole[]
  passwordResetTokens PasswordResetToken[]

  @@index([email])
  @@index([createdAt])
  @@index([isActive])
  @@map("users")
}

model Session {
  id            String   @id @default(cuid())
  userId        String
  token         String   @unique
  encryptedData String
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@index([used])
  @@map("password_reset_tokens")
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userRoles   UserRole[]
  permissions RolePermission[]

  @@index([name])
  @@index([isActive])
  @@map("roles")
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  resource   String           // e.g., "products", "appointments", "users"
  action     String           // e.g., "create", "read", "update", "delete"
  isActive   Boolean          @default(true)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  rolePermissions RolePermission[]

  @@index([name])
  @@index([resource])
  @@index([action])
  @@index([isActive])
  @@map("permissions")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  assignedBy String? // ID of admin who assigned this role
  assignedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  grantedAt    DateTime   @default(now())
  grantedBy    String?    // ID of admin who granted this permission
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permissions")
}

model Category {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  deletedAt   DateTime?
  image       String?
  isDeleted   Boolean           @default(false)
  products    ProductCategory[]

  @@index([name])
  @@index([createdAt])
  @@map("categories")
}

model Product {
  id          String            @id @default(cuid())
  name        String
  description String
  price       Float
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  deletedAt   DateTime?
  isDeleted   Boolean           @default(false)
  brand       String?
  reference   String?           @unique
  categories  ProductCategory[]
  images      ProductImage[]

  @@index([isDeleted])
  @@index([brand])
  @@index([reference])
  @@index([createdAt])
  @@index([price])
  @@index([name])
  @@map("products")
}

model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
  @@map("product_categories")
}

model ProductImage {
  id        String   @id @default(cuid())
  filename  String
  path      String
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([order])
  @@map("product_images")
}

model Testimonial {
  id        String    @id @default(cuid())
  name      String
  message   String
  rating    Int       @default(5)
  source    String    @default("internal") // internal, facebook, google, trustpilot
  externalId String?
  externalUrl String?
  externalData Json?  // Store platform-specific data
  title     String?
  image     String?
  isActive  Boolean   @default(true)
  isVerified Boolean  @default(false)
  isSynced  Boolean   @default(false)
  lastSynced DateTime?
  syncStatus String   @default("pending") // pending, success, failed
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isDeleted Boolean   @default(false)

  @@index([isDeleted])
  @@index([isActive])
  @@index([createdAt])
  @@index([name])
  @@index([source])
  @@index([isVerified])
  @@index([syncStatus])
  @@index([externalId])
  @@map("testimonials")
}

model Customer {
  id           String        @id @default(cuid())
  name         String
  email        String
  phone        String?
  address      String?
  notes        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  isDeleted    Boolean       @default(false)
  appointments Appointment[]

  @@index([isDeleted])
  @@index([email])
  @@index([name])
  @@index([createdAt])
  @@map("customers")
}

model AppointmentStatus {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  color       String   @default("#6b7280") // Default gray
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  appointments Appointment[]

  @@index([order])
  @@index([isActive])
  @@map("appointment_statuses")
}

model Appointment {
  id          String            @id @default(cuid())
  customerId  String
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  statusId    String
  status      AppointmentStatus @relation(fields: [statusId], references: [id])
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  deletedAt   DateTime?
  isDeleted   Boolean           @default(false)
  customer    Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([isDeleted])
  @@index([statusId])
  @@index([startTime])
  @@index([customerId])
  @@index([createdAt])
  @@map("appointments")
}

// Site Settings - Basic site information
model SiteSettings {
  id        String   @id @default("singleton")
  siteName  String?
  slogan    String?
  logoUrl   String?
  heroBackgroundImg String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("site_settings")
}

// Contact Settings - Contact information and location
model ContactSettings {
  id              String   @id @default("singleton")
  contactEmail    String?
  phone           String?
  whatsapp        String?
  address         String?
  city            String?
  openingHours    String?
  googleMapsApiKey String?
  whatsappChatLink String?
  googleMapEmbed  String?
  googleMapLink   String?
  instagramLink   String?
  facebookLink    String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("contact_settings")
}


// Theme Settings - All visual and styling configurations
model ThemeSettings {
  id            String   @id @default("singleton")
  primaryColor  String?
  secondaryColor String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("theme_settings")
}

// Operational Settings - System configuration and maintenance
model OperationalSettings {
  id              String   @id @default("singleton")
  maintenanceMode Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("operational_settings")
}

model Banner {
  id        String   @id @default(cuid())
  text      String
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
  @@index([startDate])
  @@index([endDate])
  @@map("banners")
}


model AboutSection {
  id        String   @id @default(cuid())
  title     String
  content   String
  image     String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([order])
  @@map("about_sections")
}

model AboutBenefit {
  id          String   @id @default(cuid())
  title       String
  description String
  highlight   String   // Highlight text for the feature
  icon        String   // Icon name (e.g., "Eye", "Shield")
  color       String   // Tailwind color class
  bgColor     String   // Tailwind background color class
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([order])
  @@map("about_benefits")
}









model HomeValues {
  id          String   @id @default(cuid())
  title       String
  description String
  highlight   String
  icon        String
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([order])
  @@map("home_values")
}


model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([order])
  @@map("faqs")
}

model ExternalAPISettings {
  id                  String   @id @default(cuid())
  googlePlacesApiKey  String?
  googlePlaceId       String?
  facebookAccessToken String?
  facebookPageId      String?
  enableGoogleSync    Boolean  @default(false)
  enableFacebookSync  Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("external_api_settings")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String?  // Icon name for Lucide icons
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  isDeleted   Boolean  @default(false)

  @@index([isActive])
  @@index([order])
  @@index([isDeleted])
  @@map("services")
}














